using Microsoft.EntityFrameworkCore;
using ItemsManagementBusinessLayer.Services;
using ItemsManagementDataAccess.Data;
using ItemsManagementDataAccess.DBA;
using ItemsManagementDataAccess.Repositories;
using System.Reflection;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    //The generated Swagger JSON file will have these properties.
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Swagger XML Api Items Management",
        Version = "v1",
    });

    //Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

    //... and tell Swagger to use those XML comments.
    c.IncludeXmlComments(xmlPath);
});
builder.Services.AddAutoMapper(typeof(Program));

//constant for the CORS policy name.
var AllowedOrigins = "_allowedOrigins";

builder.Services.AddCors(options =>
{
    // Allow requests from specified URLs.
    // Note: For ease of development, all requests are currently allowed. 
    // In a production environment, restrict the origins to only those necessary.

    options.AddPolicy(name: AllowedOrigins,
                      policy =>
                      {
                          policy.SetIsOriginAllowed(origin => true) // Allow any origin 
                          //policy.WithOrigins("https://localhost:7131", "https://localhost:44348")
                          .AllowAnyHeader()
                          .AllowAnyMethod();
                      });
});

// Configure Entity Framework Core with a SQL Server database.
builder.Services.AddDbContext<ItemsDBContext>(options => options.UseSqlServer(
    builder.Configuration.GetConnectionString("DefaultConnection")
));

// Register dependencies for dependency injection.
builder.Services.AddScoped<ItemDBA>();
builder.Services.AddScoped<IItemRepository, ItemRepository>();
builder.Services.AddScoped<IItemService, ItemService>();

// Build the application.
var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json",
                          "Swagger XML Api Items Management");
    });
}

app.UseHttpsRedirection();
app.UseCors(AllowedOrigins);
app.UseAuthorization();

app.MapControllers();

app.Run();
